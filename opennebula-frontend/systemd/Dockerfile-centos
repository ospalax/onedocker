#
# ONE Docker
#

ARG CENTOS_VERSION=8
FROM centos:${CENTOS_VERSION}
LABEL version="1.0" \
    maintainer="Petr Ospal√Ω (pospaly@opennebula.io)" \
    description="ONE Docker - Dockerized OpenNebula"

#
# BUILD ARGS
#

ARG CENTOS_VERSION
ARG OPENNEBULA_VERSION=5.12

#
# PACKAGES
#

# basic packages (and remove kdump)
RUN dnf -y remove kexec-tools && dnf -y update && dnf -y install \
        epel-release \
    && dnf clean all && rm -rf /var/cache/dnf/*

# prepare opennebula repo
COPY centos/opennebula-centos.repo /etc/yum.repos.d/opennebula.repo
RUN sed -i "s/[\$][{]OPENNEBULA_VERSION[}]/${OPENNEBULA_VERSION}/" \
        /etc/yum.repos.d/opennebula.repo

# opennebula packages and dependencies
RUN dnf -y install \
        mariadb \
        podman \
        podman-docker \
        opennebula-server \
        opennebula-ruby \
        opennebula-flow \
        opennebula-gate \
        opennebula-sunstone \
        file \
    && dnf clean all && rm -rf /var/cache/dnf/*

#
# CONFIGURATION
#

# each container should have unique machine-id (autogenerated on start)
RUN rm -f /etc/machine-id

# we cannot use the entrypoint (explanation below) so we will have to configure
# the onedocker deployment via systemd's oneshot service

# onedocker script which is doing the heavy-lifting
COPY onedocker-frontend.sh /
RUN chown root:root /onedocker-frontend.sh
RUN chmod 755 /onedocker-frontend.sh

# oneshot systemd service to execute onedocker script
COPY onedocker-frontend.service /etc/systemd/system/
RUN chown root:root /etc/systemd/system/onedocker-frontend.service
RUN chmod 644 /etc/systemd/system/onedocker-frontend.service

# disable autostart of opennebula services
RUN systemctl list-unit-files | \
    awk '{if (($1 ~ /^opennebula/) && ($2 != "static")) print $1;}' | \
    while read -r _oneservice ; do \
        systemctl mask "${_oneservice}" ; \
    done ;

# setup our entrypoint replacement - oneshot service
RUN systemctl enable onedocker-frontend.service

#
# ENTRYPOINT
#

# systemd workarounds

# this hints the systemd that it is running inside a container
#ENV container docker

# Source: https://developers.redhat.com/blog/2016/09/13/running-systemd-in-a-non-privileged-container/
#
#   Systemd does not exit on sigterm. Systemd defines that shutdown signal as
#   SIGRTMIN+3, docker upstream should send this signal when user does a docker
#   stop.
STOPSIGNAL SIGRTMIN+3

# BEWARE: this command directive and *EMPTY* entrypoint is mandatory for podman
# to do some hidden hacks allowing systemd to mount cgroup and be able to run
# inside the container...
#
# Source: https://developers.redhat.com/blog/2019/04/24/how-to-run-systemd-in-a-container/
#
#   When Podman starts a container that is running init or systemd as its
#   initial command, Podman automatically sets up the tmpfs and Cgroups for
#   systemd to start without a problem. If you want to block the systemd
#   behavior, you have to run --systemd=false. Note that the systemd behavior
#   only happens when Podman sees the command to be executed is systemd or
#   init.

# leave commented and unset
#ENTRYPOINT ["DO-NOT-USE"]

# do not change
CMD [ "/sbin/init" ]

#
# PUBLISHED SERVICES
#

EXPOSE 9869/tcp
EXPOSE 2633/tcp

